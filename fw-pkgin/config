# The FW_PACKAGE_MAINTAINER field is populated with the environment
# variable FW_PACKAGE_DEFAULT_MAINTAINER if non-empty at init time

FW_PACKAGE_NAME="lager"
FW_PACKAGE_VERSION="0.20120430.0"
FW_PACKAGE_MAINTAINER="Michael Radford <mrad@loveit.com>"
FW_PACKAGE_SHORT_DESCRIPTION="Erlang logging framework."
FW_PACKAGE_DESCRIPTION=`cat README`
FW_PACKAGE_ARCHITECTURE_DEPENDENT="0"

# Dependency information.  The native syntax corresponds to Debian,
# http://www.debian.org/doc/debian-policy/ch-relationships.html
# Section 7.1 "Syntax of Relationship Fields"
# 
# For other packaging systems, the syntax is translated for you.

FW_PACKAGE_DEPENDS=""
FW_PACKAGE_CONFLICTS=""
FW_PACKAGE_PROVIDES=""
FW_PACKAGE_REPLACES=""
FW_PACKAGE_SUGGESTS=""

FW_PACKAGE_BUILD_DEPENDS=""
FW_PACKAGE_BUILD_CONFLICTS=""

# dupload is used for submitting debian packages to a package archive
# The FW_DUPLOAD_ARGS field is populated with the environment variable
# FW_DEFAULT_DUPLOAD_ARGS if non-empty at init time

FW_DUPLOAD_ARGS=${FW_DUPLOAD_ARGS-"-t juvo"}

# scp+createrepo is used for submitting rpm packages to a package archive
# The FW_RPM_REPO_USER, FW_RPM_REPO_HOST, FW_RPM_REPO_BASEDIR,
# and FW_RPM_POSTCREATEREPO_COMMANDS variables are populated with 
# FW_RPM_REPO_USER_DEFAULT, FW_RPM_REPO_HOST_DEFAULT, 
# FW_RPM_REPO_BASEDIR_DEFAULT, and FW_RPM_POSTCREATEREPO_COMMANDS_DEFAULT
# respectively if non-empty at init time

FW_RPM_REPO_USER=${FW_RPM_REPO_USER-"`whoami`"}
FW_RPM_REPO_HOST=${FW_RPM_REPO_HOST-"localhost"}
FW_RPM_REPO_BASEDIR=${FW_RPM_REPO_BASEDIR-""}
FW_RPM_CREATEREPO_ARGS=${FW_RPM_CREATEREPO_ARGS-"-q --database"}

# this variable controls whether createrepo is run incrementally (--update).
# possible settings are yes (always do it), no (never do it), and 
# auto (do it if the repository has been previously initialized)
FW_RPM_CREATEREPO_INCREMENTAL=${FW_RPM_CREATEREPO_INCREMENTAL-"auto"}

# these commands will be run after a successful createrepo run
FW_RPM_POSTCREATEREPO_COMMANDS=${FW_RPM_POSTCREATEREPO_COMMANDS-"true"}
# here's a suggestion:
# FW_RPM_POSTCREATEREPO_COMMANDS="gpg --detach-sign --armor repodata/repomd.xml" 

# uncomment and set manually if you want the application name to be different
# from FW_PACKAGE_NAME, application name must consist of characters [a-zA-Z_]
# FW_ERL_APP_NAME=""

# uncomment and set manually if autodetection of modules is incorrect.
# should be an erlang expression which evaluates to a list.
# FW_ERL_APP_MODULES="[]"

# uncomment and set manually if autodetection of registered processes is incorrect
# should be an erlang expression which evaluates to a list.
# FW_ERL_APP_REGISTERED="[]"

# uncomment and set manually if autodetection of start module is incorrect
# should be an erlang expression which evaluates to an atom.
# FW_ERL_APP_START_MODULE=""

# uncomment to define start args to the start module.  should be an erlang
# expression which evaluates to a list.  this only has an effect if
# FW_ERL_APP_START_MODULE is set manually.
# FW_ERL_APP_START_ARGS="[]"

# uncomment if the module line being generated is incorrect and you want 
# to override it.
# FW_ERL_APP_MOD_LINE="{ mod, { $FW_ERL_APP_START_MODULE, $FW_ERL_APP_START_ARGS } }"

# uncomment to define the application environment variables. should be an 
# erlang expression which evaluates to a list.

# from src/lager.app.src
FW_ERL_APP_ENVIRONMENT="[
            %% What handlers to install with what arguments
            {handlers, [
                {lager_console_backend, info},
                {lager_file_backend, [
                    {\"log/error.log\", error, 10485760, \"$D0\", 5},
                    {\"log/console.log\", info, 10485760, \"$D0\", 5}
                ]}
            ]},
            %% Whether to write a crash log, and where. Undefined means no crash logger.
            {crash_log, \"log/crash.log\"},
            %% Maximum size in bytes of events in the crash log - defaults to 65536
            {crash_log_msg_size, 65536},
            %% Maximum size of the crash log in bytes, before its rotated, set
            %% to 0 to disable rotation - default is 0
            {crash_log_size, 10485760},
            %% What time to rotate the crash log - default is no time
            %% rotation. See the README for a description of this format.
            {crash_log_date, \"\$D0\"},
            %% Number of rotated crash logs to keep, 0 means keep only the
            %% current one - default is 0
            {crash_log_count, 5},
            %% Whether to redirect error_logger messages into lager - defaults to true
            {error_logger_redirect, true}
]"

# uncomment to indicate additional OTP applications (besides kernel and stdlib)
# that this application depends upon.  should be an erlang expression which 
# evaluates to a list.

# from src/lager.app.src
FW_ERL_PREREQ_APPLICATIONS_EXTRA="[compiler, syntax_tools]"

# uncomment to add arbitrary extra content to the app file, e.g., an
# included application directive.  should be an erlang expression which 
# evaluates to a proplist (list of key-value tuple pairs).
# FW_ERL_APP_EXTRA="[]"
